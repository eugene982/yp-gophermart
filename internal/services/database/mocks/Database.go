// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/eugene982/yp-gophermart/internal/model"

	sqlx "github.com/jmoiron/sqlx"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: _a0
func (_m *Database) Open(_a0 *sqlx.DB) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.DB) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: _a0
func (_m *Database) Ping(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadAccruals provides a mock function with given fields: ctx, userID
func (_m *Database) ReadAccruals(ctx context.Context, userID string) ([]model.OperationsInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.OperationsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.OperationsInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OperationsInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OperationsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadBalance provides a mock function with given fields: ctx, userID
func (_m *Database) ReadBalance(ctx context.Context, userID string) (model.BalanceInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.BalanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.BalanceInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.BalanceInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.BalanceInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOrders provides a mock function with given fields: ctx, userID, orders
func (_m *Database) ReadOrders(ctx context.Context, userID string, orders ...int64) ([]model.OrderInfo, error) {
	_va := make([]interface{}, len(orders))
	for _i := range orders {
		_va[_i] = orders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []model.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) ([]model.OrderInfo, error)); ok {
		return rf(ctx, userID, orders...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) []model.OrderInfo); ok {
		r0 = rf(ctx, userID, orders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...int64) error); ok {
		r1 = rf(ctx, userID, orders...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOrdersWithStatus provides a mock function with given fields: ctx, status, limit
func (_m *Database) ReadOrdersWithStatus(ctx context.Context, status []string, limit int) ([]model.OrderInfo, error) {
	ret := _m.Called(ctx, status, limit)

	var r0 []model.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int) ([]model.OrderInfo, error)); ok {
		return rf(ctx, status, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int) []model.OrderInfo); ok {
		r0 = rf(ctx, status, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int) error); ok {
		r1 = rf(ctx, status, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadUser provides a mock function with given fields: ctx, userID
func (_m *Database) ReadUser(ctx context.Context, userID string) (model.UserInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.UserInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.UserInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadWithdraws provides a mock function with given fields: ctx, userID
func (_m *Database) ReadWithdraws(ctx context.Context, userID string) ([]model.OperationsInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.OperationsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.OperationsInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OperationsInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OperationsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderAccrual provides a mock function with given fields: ctx, order, accrual
func (_m *Database) UpdateOrderAccrual(ctx context.Context, order model.OrderInfo, accrual int) error {
	ret := _m.Called(ctx, order, accrual)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderInfo, int) error); ok {
		r0 = rf(ctx, order, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteNewOrder provides a mock function with given fields: ctx, userID, order
func (_m *Database) WriteNewOrder(ctx context.Context, userID string, order int64) error {
	ret := _m.Called(ctx, userID, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, userID, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteUser provides a mock function with given fields: ctx, data
func (_m *Database) WriteUser(ctx context.Context, data model.UserInfo) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserInfo) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteWithdraw provides a mock function with given fields: ctx, userID, order, sum
func (_m *Database) WriteWithdraw(ctx context.Context, userID string, order int64, sum int) error {
	ret := _m.Called(ctx, userID, order, sum)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int) error); ok {
		r0 = rf(ctx, userID, order, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
